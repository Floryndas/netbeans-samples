package net.flinkgutt.samples.nodes.dbmanager;

import java.util.List;
import java.util.ArrayList;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import net.flinkgutt.samples.nodes.api.db.IConnectionService;
import net.flinkgutt.samples.nodes.api.db.IDatabaseServer;
import net.flinkgutt.samples.nodes.api.db.IDatabaseServerSettings;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;

/**
 *
 * @author Christian
 */
public class ConnectionManager extends javax.swing.JPanel {

    private IConnectionService service = Lookup.getDefault().lookup(IConnectionService.class);
    private List<IDatabaseServer> databaseServers = new ArrayList<IDatabaseServer>();

    /**
     * Creates new form ConnectionManager
     */
    public ConnectionManager() {
        initComponents();

        // TODO This needs to be less hardcoded and coupled up with what's happening in SuperDAO and the registered SQL drivers.
        IDatabaseServer mysql = new DBServer("MySQL", "org.gjt.mm.mysql.Driver", "3306", "jdbc:mysql://", "com.mysql");
        IDatabaseServer postgresql = new DBServer("PostgreSQL", "org.postgresql.Driver", "5432", "jdbc:postgresql://", "org.postgresql");
        databaseServers.add(mysql);
        databaseServers.add(postgresql);
        databaseServerComboBox.setModel(new DefaultComboBoxModel<IDatabaseServer>(databaseServers.toArray(new IDatabaseServer[databaseServers.size()])));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverListScrollPane = new javax.swing.JScrollPane();
        serverJList = new javax.swing.JList<IDatabaseServerSettings>();
        serversLabel = new javax.swing.JLabel();
        settingsTabbedPane1 = new javax.swing.JTabbedPane();
        dbSettingsPanel = new javax.swing.JPanel();
        databaseServerComboBox = new javax.swing.JComboBox<IDatabaseServer>();
        sqlServerLabel = new javax.swing.JLabel();
        hostnameLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        hostnameField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        databaseLabel = new javax.swing.JLabel();
        dbPortLabel = new javax.swing.JLabel();
        dbPortField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        databaseField = new javax.swing.JTextField();
        connectionNameLable = new javax.swing.JLabel();
        connectionNameField = new javax.swing.JTextField();
        sshTunnelPanel = new javax.swing.JPanel();
        useSSHTunnelCheckbox = new javax.swing.JCheckBox();
        sshTunnelExplainLabel = new javax.swing.JLabel();
        sshHostIpLabel = new javax.swing.JLabel();
        sshHostnameField = new javax.swing.JTextField();
        sshPortLabel = new javax.swing.JLabel();
        sshPortSpinner = new javax.swing.JSpinner();
        sshUsernameLabel = new javax.swing.JLabel();
        sshUsernameField = new javax.swing.JTextField();
        sshPasswordLabel = new javax.swing.JLabel();
        sshPasswordField = new javax.swing.JPasswordField();
        testConnectionButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        serverJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        serverJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        serverJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serverJListValueChanged(evt);
            }
        });
        serverListScrollPane.setViewportView(serverJList);

        serversLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(serversLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.serversLabel.text")); // NOI18N

        databaseServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        databaseServerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseServerComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sqlServerLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sqlServerLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(hostnameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.hostnameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(usernameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.usernameLabel.text")); // NOI18N

        hostnameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.hostnameField.text")); // NOI18N

        usernameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.usernameField.text")); // NOI18N

        passwordField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.passwordField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.passwordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(databaseLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.databaseLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dbPortLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbPortLabel.text")); // NOI18N

        dbPortField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbPortField.text")); // NOI18N

        databaseField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.databaseField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(connectionNameLable, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.connectionNameLable.text")); // NOI18N

        connectionNameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.connectionNameField.text")); // NOI18N

        javax.swing.GroupLayout dbSettingsPanelLayout = new javax.swing.GroupLayout(dbSettingsPanel);
        dbSettingsPanel.setLayout(dbSettingsPanelLayout);
        dbSettingsPanelLayout.setHorizontalGroup(
            dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(connectionNameLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                        .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(databaseLabel)
                            .addComponent(hostnameLabel)
                            .addComponent(sqlServerLabel)
                            .addComponent(usernameLabel)
                            .addComponent(passwordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(databaseServerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                                .addComponent(hostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dbPortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(databaseField)
                            .addComponent(usernameField)
                            .addComponent(passwordField))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        dbSettingsPanelLayout.setVerticalGroup(
            dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dbSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionNameLable)
                    .addComponent(connectionNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sqlServerLabel)
                    .addComponent(databaseServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostnameLabel)
                    .addComponent(hostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbPortLabel)
                    .addComponent(dbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseLabel)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        settingsTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbSettingsPanel.TabConstraints.tabTitle"), dbSettingsPanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useSSHTunnelCheckbox, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.useSSHTunnelCheckbox.text")); // NOI18N
        useSSHTunnelCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSSHTunnelCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sshTunnelExplainLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshTunnelExplainLabel.text")); // NOI18N
        sshTunnelExplainLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshHostIpLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshHostIpLabel.text")); // NOI18N
        sshHostIpLabel.setEnabled(false);

        sshHostnameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshHostnameField.text")); // NOI18N
        sshHostnameField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshPortLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPortLabel.text")); // NOI18N
        sshPortLabel.setEnabled(false);

        sshPortSpinner.setModel(new javax.swing.SpinnerNumberModel(22, 1, 65556, 1));
        sshPortSpinner.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshUsernameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshUsernameLabel.text")); // NOI18N
        sshUsernameLabel.setEnabled(false);

        sshUsernameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshUsernameField.text")); // NOI18N
        sshUsernameField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshPasswordLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPasswordLabel.text")); // NOI18N
        sshPasswordLabel.setEnabled(false);

        sshPasswordField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPasswordField.text")); // NOI18N
        sshPasswordField.setEnabled(false);

        javax.swing.GroupLayout sshTunnelPanelLayout = new javax.swing.GroupLayout(sshTunnelPanel);
        sshTunnelPanel.setLayout(sshTunnelPanelLayout);
        sshTunnelPanelLayout.setHorizontalGroup(
            sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sshTunnelPanelLayout.createSequentialGroup()
                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sshTunnelPanelLayout.createSequentialGroup()
                        .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sshTunnelPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(sshPasswordLabel))
                            .addGroup(sshTunnelPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sshPortLabel)
                                    .addComponent(sshHostIpLabel)
                                    .addComponent(sshUsernameLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sshHostnameField)
                            .addComponent(sshUsernameField)
                            .addComponent(sshPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addGroup(sshTunnelPanelLayout.createSequentialGroup()
                                .addComponent(sshPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(sshTunnelPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useSSHTunnelCheckbox)
                            .addComponent(sshTunnelExplainLabel))))
                .addContainerGap())
        );
        sshTunnelPanelLayout.setVerticalGroup(
            sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sshTunnelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useSSHTunnelCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sshTunnelExplainLabel)
                .addGap(18, 18, 18)
                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshHostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshHostIpLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sshPortLabel)
                    .addComponent(sshPortSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshUsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sshTunnelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshPasswordLabel))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        settingsTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshTunnelPanel.TabConstraints.tabTitle"), sshTunnelPanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testConnectionButton, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.testConnectionButton.text")); // NOI18N
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(connectButton, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.connectButton.text")); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exitButton, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.exitButton.text")); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(serverListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(settingsTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(testConnectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton))
                    .addComponent(serversLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connectButton, exitButton, testConnectionButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(serversLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsTabbedPane1)
                    .addComponent(serverListScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testConnectionButton)
                    .addComponent(connectButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useSSHTunnelCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSSHTunnelCheckboxActionPerformed
        boolean isChecked = useSSHTunnelCheckbox.isSelected();
        sshTunnelExplainLabel.setEnabled(isChecked);
        sshHostIpLabel.setEnabled(isChecked);
        sshHostnameField.setEnabled(isChecked);
        sshPortLabel.setEnabled(isChecked);
        sshPortSpinner.setEnabled(isChecked);
        sshUsernameField.setEnabled(isChecked);
        sshUsernameLabel.setEnabled(isChecked);
        sshPasswordField.setEnabled(isChecked);
        sshPasswordLabel.setEnabled(isChecked);
    }//GEN-LAST:event_useSSHTunnelCheckboxActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        // TODO Check if everything we need is filled out properly

        boolean clearToConnectToDB = true;
        // If this connection is to use an SSH tunnel to get to the DB
        if (useSSHTunnelCheckbox.isSelected()) {
            // TODO Implement setup of tunnel
            // some check to see if the tunnel is up and running
            // set clearToConnectToDB = false if the tunnel isn't open
        }
        storeServers(); // TODO REMOVE. Just to test stuff for now.
    }//GEN-LAST:event_testConnectionButtonActionPerformed

    private void serverJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serverJListValueChanged

        if (serverJList.isSelectionEmpty()) {
            return;
        }
        IDatabaseServerSettings settings = serverJList.getSelectedValue();
        connectionNameField.setText(settings.getDisplayName());
        databaseField.setText(settings.getDBName());
        hostnameField.setText(settings.getDBHostname());
        dbPortField.setText("" + settings.getDBPort());
        passwordField.setText(settings.getDBPassword());
        usernameField.setText(settings.getDBUsername());

        sshHostnameField.setText(settings.getSSHHostname());
        sshPasswordField.setText(settings.getSSHPassword());
        sshPortSpinner.setValue(settings.getSSHPort());

        String identifier = settings.getDBIdentifier();

        // Setting the correct database server in the combobox
        int itemCount = databaseServerComboBox.getItemCount();
        for (int i = 0; i < itemCount; i++) {
            IDatabaseServer server = databaseServerComboBox.getItemAt(i);
            if (identifier.equals(server.getIdentifier())) {
                databaseServerComboBox.setSelectedIndex(i);
            }
        }

    }//GEN-LAST:event_serverJListValueChanged

    private void databaseServerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseServerComboBoxActionPerformed
        IDatabaseServer databaseServer = (IDatabaseServer) databaseServerComboBox.getSelectedItem();
        dbPortField.setText(databaseServer.getDefaultPort());

    }//GEN-LAST:event_databaseServerComboBoxActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        try {
            // TODO add your handling code here:
            List<IDatabaseServerSettings> servers = getConfiguredServers();
            this.serverJList.setListData(servers.toArray(new IDatabaseServerSettings[servers.size()]));
        } catch (BackingStoreException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_exitButtonActionPerformed
    private IDatabaseServerSettings currentSettings = null;
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        currentSettings = serverJList.getSelectedValue();
        if (currentSettings != null) {
            service.connect(currentSettings);
        }

    }//GEN-LAST:event_connectButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField connectionNameField;
    private javax.swing.JLabel connectionNameLable;
    private javax.swing.JTextField databaseField;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JComboBox<IDatabaseServer> databaseServerComboBox;
    private javax.swing.JTextField dbPortField;
    private javax.swing.JLabel dbPortLabel;
    private javax.swing.JPanel dbSettingsPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField hostnameField;
    private javax.swing.JLabel hostnameLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JList<IDatabaseServerSettings> serverJList;
    private javax.swing.JScrollPane serverListScrollPane;
    private javax.swing.JLabel serversLabel;
    private javax.swing.JTabbedPane settingsTabbedPane1;
    private javax.swing.JLabel sqlServerLabel;
    private javax.swing.JLabel sshHostIpLabel;
    private javax.swing.JTextField sshHostnameField;
    private javax.swing.JPasswordField sshPasswordField;
    private javax.swing.JLabel sshPasswordLabel;
    private javax.swing.JLabel sshPortLabel;
    private javax.swing.JSpinner sshPortSpinner;
    private javax.swing.JLabel sshTunnelExplainLabel;
    private javax.swing.JPanel sshTunnelPanel;
    private javax.swing.JTextField sshUsernameField;
    private javax.swing.JLabel sshUsernameLabel;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JCheckBox useSSHTunnelCheckbox;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    private void storeServers() {
        // Just so we have something to test with for the time being
        Preferences servers = NbPreferences.root().node("netbeans-samples_servers");
        Preferences tacofisk = servers.node("DBSERVER-tacofisk");
        tacofisk.put("displayname", "Tacofisk");
        tacofisk.put("dbhostname", "localhost");
        tacofisk.put("dbusername", "netbeans-samples");
        tacofisk.put("dbpassword", "secretpassword123");
        tacofisk.put("dbname", "netbeans-samples");
        tacofisk.putInt("dbport", 3306);
        tacofisk.put("dbidentifier", "com.mysql");
        tacofisk.put("jdbcurl", "jdbc:mysql://");
        tacofisk.put("dbdriver", "org.gjt.mm.mysql.Driver");
        tacofisk.putBoolean("useTunnel", false);

        Preferences flinkgutt = servers.node("DBSERVER-flinkgutt");
        flinkgutt.put("displayname", "flinkgutt");
        flinkgutt.put("dbhostname", "localhost");
        flinkgutt.put("dbname", "netbeans-samples");
        flinkgutt.put("dbusername", "netbeans-samples");
        flinkgutt.put("dbpassword", "secretpassword123");
        flinkgutt.put("dbidentifier", "org.postgresql");
        flinkgutt.put("dbdriver", "org.postgresql.Driver");
        flinkgutt.put("jdbcurl", "jdbc:postgresql://");
        flinkgutt.putInt("dbport", 5432);
        flinkgutt.putBoolean("useTunnel", false);

        try {
            servers.flush();
        } catch (BackingStoreException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private List<IDatabaseServerSettings> getConfiguredServers() throws BackingStoreException {
        List<IDatabaseServerSettings> serverList = new ArrayList<IDatabaseServerSettings>();

        Preferences servers = NbPreferences.root().node("netbeans-samples_servers");
        if (servers != null) {
            String[] dbservers = servers.childrenNames();
            for (int i = 0; i < dbservers.length; i++) {
                String specificServer = dbservers[i];
                if (specificServer.startsWith("DBSERVER-")) {
                    Preferences s = servers.node(specificServer);
                    DBServerSettings se = new DBServerSettings();

                    se.setDisplayName(s.get("displayname", ""));
                    se.setDBHostname(s.get("dbhostname", ""));
                    se.setDBPort(s.getInt("dbport", 0));
                    se.setDbName(s.get("dbname", ""));
                    se.setDbUsername(s.get("dbusername", ""));
                    se.setDbPassword(s.get("dbpassword", ""));
                    se.setDBIdentifier(s.get("dbidentifier", ""));
                    se.setDriver(s.get("dbdriver", ""));
                    se.setJDBCString(s.get("jdbcurl", ""));
                    se.setUseTunnel(s.getBoolean("usetunnel", false));
                    se.setSSHHostname(s.get("sshhostname", ""));
                    se.setSSHUsername(s.get("sshusername", ""));
                    se.setSSHPort(s.getInt("sshport", 22));

                    serverList.add(se);
                }
            }
        }
        return serverList;
    }
}
