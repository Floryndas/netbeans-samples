/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.flinkgutt.samples.nodes.dbmanager;

import java.util.List;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import net.flinkgutt.samples.nodes.api.db.IDatabaseServer;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

/**
 *
 * @author Christian
 */
public class ConnectionManager extends javax.swing.JPanel {

    private List<IDatabaseServer> databaseServers = new ArrayList<IDatabaseServer>();
    /**
     * Creates new form ConnectionManager
     */
    public ConnectionManager() {
        initComponents();
        IDatabaseServer mysql = new DBServer("MySQL","org.gjt.mm.mysql.Driver","3306", "jdbc:mysql://");
        IDatabaseServer postgresql = new DBServer("PostgreSQL","org.postgresql.Driver","5432","jdbc:postgresql://");
        databaseServers.add(mysql);
        databaseServers.add(postgresql);
        //jList1.setListData(databaseServers.toArray(new IDatabaseServer[databaseServers.size()]));
        databaseServerComboBox.setModel(new DefaultComboBoxModel<IDatabaseServer>(databaseServers.toArray(new IDatabaseServer[databaseServers.size()])));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<IDatabaseServer>();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        dbSettingsPanel = new javax.swing.JPanel();
        databaseServerComboBox = new javax.swing.JComboBox<IDatabaseServer>();
        sqlServerLabel = new javax.swing.JLabel();
        hostnameLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        hostnameField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        databaseLabel = new javax.swing.JLabel();
        dbPortLabel = new javax.swing.JLabel();
        dbPortField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        databaseField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        useSSHTunnelCheckbox = new javax.swing.JCheckBox();
        sshTunnelExplainLabel = new javax.swing.JLabel();
        sshHostIpLabel = new javax.swing.JLabel();
        sshHostnameField = new javax.swing.JTextField();
        sshPortLabel = new javax.swing.JLabel();
        sshPortSpinner = new javax.swing.JSpinner();
        sshUsernameLabel = new javax.swing.JLabel();
        sshUsernameField = new javax.swing.JTextField();
        sshPasswordLabel = new javax.swing.JLabel();
        sshPasswordField = new javax.swing.JPasswordField();
        testConnectionButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.jLabel1.text")); // NOI18N

        databaseServerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        databaseServerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseServerComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sqlServerLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sqlServerLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(hostnameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.hostnameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(usernameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.usernameLabel.text")); // NOI18N

        hostnameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.hostnameField.text")); // NOI18N

        usernameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.usernameField.text")); // NOI18N

        jPasswordField1.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.jPasswordField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.passwordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(databaseLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.databaseLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dbPortLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbPortLabel.text")); // NOI18N

        dbPortField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbPortField.text")); // NOI18N

        databaseField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.databaseField.text")); // NOI18N

        javax.swing.GroupLayout dbSettingsPanelLayout = new javax.swing.GroupLayout(dbSettingsPanel);
        dbSettingsPanel.setLayout(dbSettingsPanelLayout);
        dbSettingsPanelLayout.setHorizontalGroup(
            dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                        .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(databaseLabel)
                            .addComponent(hostnameLabel)
                            .addComponent(sqlServerLabel)
                            .addComponent(usernameLabel)
                            .addComponent(passwordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(databaseServerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                                .addComponent(hostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dbPortLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(databaseField)
                            .addComponent(usernameField)
                            .addComponent(jPasswordField1))
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        dbSettingsPanelLayout.setVerticalGroup(
            dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sqlServerLabel)
                    .addComponent(databaseServerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostnameLabel)
                    .addComponent(hostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dbPortLabel)
                    .addComponent(dbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseLabel)
                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dbSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.dbSettingsPanel.TabConstraints.tabTitle"), dbSettingsPanel); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useSSHTunnelCheckbox, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.useSSHTunnelCheckbox.text")); // NOI18N
        useSSHTunnelCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSSHTunnelCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sshTunnelExplainLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshTunnelExplainLabel.text")); // NOI18N
        sshTunnelExplainLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshHostIpLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshHostIpLabel.text")); // NOI18N
        sshHostIpLabel.setEnabled(false);

        sshHostnameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshHostnameField.text")); // NOI18N
        sshHostnameField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshPortLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPortLabel.text")); // NOI18N
        sshPortLabel.setEnabled(false);

        sshPortSpinner.setModel(new javax.swing.SpinnerNumberModel(22, 1, 65556, 1));
        sshPortSpinner.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshUsernameLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshUsernameLabel.text")); // NOI18N
        sshUsernameLabel.setEnabled(false);

        sshUsernameField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshUsernameField.text")); // NOI18N
        sshUsernameField.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(sshPasswordLabel, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPasswordLabel.text")); // NOI18N
        sshPasswordLabel.setEnabled(false);

        sshPasswordField.setText(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.sshPasswordField.text")); // NOI18N
        sshPasswordField.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(sshPasswordLabel))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sshPortLabel)
                                    .addComponent(sshHostIpLabel)
                                    .addComponent(sshUsernameLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sshHostnameField)
                            .addComponent(sshUsernameField)
                            .addComponent(sshPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sshPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useSSHTunnelCheckbox)
                            .addComponent(sshTunnelExplainLabel))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useSSHTunnelCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sshTunnelExplainLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshHostnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshHostIpLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sshPortLabel)
                    .addComponent(sshPortSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshUsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sshPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sshPasswordLabel))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testConnectionButton, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.testConnectionButton.text")); // NOI18N
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.okButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ConnectionManager.class, "ConnectionManager.jButton1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(testConnectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, okButton, testConnectionButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testConnectionButton)
                    .addComponent(okButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useSSHTunnelCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSSHTunnelCheckboxActionPerformed
        boolean isChecked = useSSHTunnelCheckbox.isSelected();
        sshTunnelExplainLabel.setEnabled(isChecked);
        sshHostIpLabel.setEnabled(isChecked);
        sshHostnameField.setEnabled(isChecked);
        sshPortLabel.setEnabled(isChecked);
        sshPortSpinner.setEnabled(isChecked);
        sshUsernameField.setEnabled(isChecked);
        sshUsernameLabel.setEnabled(isChecked);
        sshPasswordField.setEnabled(isChecked);
        sshPasswordLabel.setEnabled(isChecked);
    }//GEN-LAST:event_useSSHTunnelCheckboxActionPerformed

    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        // TODO Check if everything we need is filled out properly
        
        
        boolean clearToConnectToDB = true;
        // If this connection is to use an SSH tunnel to get to the DB
        if(useSSHTunnelCheckbox.isSelected()) {
            // TODO Implement setup of tunnel
            
            // some check to see if the tunnel is up and running
            // set clearToConnectToDB = false if the tunnel isn't open
        }
        IDatabaseServer selectedDB = jList1.getSelectedValue();
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName(selectedDB.getDriverUrl());
    }//GEN-LAST:event_testConnectionButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        System.out.println("So we selected a Database in the list...");
    }//GEN-LAST:event_jList1ValueChanged

    private void databaseServerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseServerComboBoxActionPerformed
        // TODO add your handling code here:
        System.out.println("ComboBoxActionPerformed");
    }//GEN-LAST:event_databaseServerComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseField;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JComboBox<IDatabaseServer> databaseServerComboBox;
    private javax.swing.JTextField dbPortField;
    private javax.swing.JLabel dbPortLabel;
    private javax.swing.JPanel dbSettingsPanel;
    private javax.swing.JTextField hostnameField;
    private javax.swing.JLabel hostnameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<IDatabaseServer> jList1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel sqlServerLabel;
    private javax.swing.JLabel sshHostIpLabel;
    private javax.swing.JTextField sshHostnameField;
    private javax.swing.JPasswordField sshPasswordField;
    private javax.swing.JLabel sshPasswordLabel;
    private javax.swing.JLabel sshPortLabel;
    private javax.swing.JSpinner sshPortSpinner;
    private javax.swing.JLabel sshTunnelExplainLabel;
    private javax.swing.JTextField sshUsernameField;
    private javax.swing.JLabel sshUsernameLabel;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JCheckBox useSSHTunnelCheckbox;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
