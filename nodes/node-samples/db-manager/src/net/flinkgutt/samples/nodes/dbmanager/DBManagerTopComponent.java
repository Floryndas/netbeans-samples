/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.flinkgutt.samples.nodes.dbmanager;

import net.flinkgutt.samples.nodes.api.IConnectionEvent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.flinkgutt.samples.nodes.dbmanager//DBManager//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "DBManagerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "net.flinkgutt.samples.nodes.dbmanager.DBManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DBManagerAction",
        preferredID = "DBManagerTopComponent")
@Messages({
    "CTL_DBManagerAction=DBManager",
    "CTL_DBManagerTopComponent=DBManager Window",
    "HINT_DBManagerTopComponent=This is a DBManager window"
})
public final class DBManagerTopComponent extends TopComponent implements Lookup.Provider {

    public DBManagerTopComponent() {
        initComponents();
        setName(Bundle.CTL_DBManagerTopComponent());
        setToolTipText(Bundle.HINT_DBManagerTopComponent());
        ic = new InstanceContent();
        LKP = new AbstractLookup(ic);
        super.associateLookup(LKP);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();

        connectButton.setBackground(new java.awt.Color(0, 255, 0));
        org.openide.awt.Mnemonics.setLocalizedText(connectButton, org.openide.util.NbBundle.getMessage(DBManagerTopComponent.class, "DBManagerTopComponent.connectButton.text")); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(disconnectButton, org.openide.util.NbBundle.getMessage(DBManagerTopComponent.class, "DBManagerTopComponent.disconnectButton.text")); // NOI18N
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectButton)
                .addGap(18, 18, 18)
                .addComponent(disconnectButton)
                .addContainerGap(214, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(disconnectButton))
                .addContainerGap(160, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    InstanceContent ic = null;
    AbstractLookup LKP = null; 
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("We clicked the connect button");
        System.out.println("InstanceContent: (Connect) " + ic);
        ic.remove(currentEvent);
        currentEvent.setEvent(IConnectionEvent.CONNECT);
        ic.add(currentEvent);        
    }//GEN-LAST:event_connectButtonActionPerformed

    class ConEvent implements IConnectionEvent {

        private Integer event;

        @Override
        public Integer getEvent() {
            return event;
        }

        @Override
        public void setEvent(Integer event) {
            this.event = event;
        }
    }
    private IConnectionEvent currentEvent = new ConEvent();
    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        System.out.println("We clicked the DISCONNECT button");
        System.out.println("InstanceContent: " + ic);
        ic.remove(currentEvent);
        currentEvent.setEvent(IConnectionEvent.DISCONNECT);
        ic.add(currentEvent);   
        
    }//GEN-LAST:event_disconnectButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
