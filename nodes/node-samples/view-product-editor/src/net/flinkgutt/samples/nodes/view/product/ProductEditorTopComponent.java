package net.flinkgutt.samples.nodes.view.product;

import ca.odell.glazedlists.BasicEventList;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.swing.EventJXTableModel;
import java.util.Collection;
import net.flinkgutt.samples.nodes.api.ICategory;
import net.flinkgutt.samples.nodes.api.IProduct;
import net.flinkgutt.samples.nodes.api.IProductDAO;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.flinkgutt.samples.nodes.view.product//ProductEditor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ProductEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "net.flinkgutt.samples.nodes.view.product.ProductEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProductEditorAction",
        preferredID = "ProductEditorTopComponent")
@Messages({
    "CTL_ProductEditorAction=ProductEditor",
    "CTL_ProductEditorTopComponent=ProductEditor Window",
    "HINT_ProductEditorTopComponent=This is a ProductEditor window"
})
public final class ProductEditorTopComponent extends TopComponent implements LookupListener {
    private IProductDAO productDAO = Lookup.getDefault().lookup(IProductDAO.class);
    private EventList<IProduct> productEventList = new BasicEventList<IProduct>();
    private EventJXTableModel<IProduct> productsTableModel = new EventJXTableModel<IProduct>(productEventList,new AdvancedProductsTableFormat());
    private Lookup.Result<ICategory> categoryResult = null;
    
    public ProductEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ProductEditorTopComponent());
        setToolTipText(Bundle.HINT_ProductEditorTopComponent());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();

        jXTable1.setModel(productsTableModel);
        jXTable1.setHighlighters(HighlighterFactory.createSimpleStriping());
        jScrollPane1.setViewportView(jXTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        categoryResult = Utilities.actionsGlobalContext().lookupResult(ICategory.class);
        categoryResult.addLookupListener (this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        categoryResult.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends ICategory> catRes =  categoryResult.allInstances();
        if( catRes.size() == 1)  {
            ICategory category = catRes.iterator().next();
            if (category == null) {
                return;
            }
            try {
            productEventList.getReadWriteLock().writeLock().lock();
            productEventList.clear();
            productEventList.addAll( productDAO.getProducts(category) );
            } finally {
                productEventList.getReadWriteLock().writeLock().unlock();
            }
        }
        
    }
}
