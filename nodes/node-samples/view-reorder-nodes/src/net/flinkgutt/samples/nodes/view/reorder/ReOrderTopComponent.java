/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.flinkgutt.samples.nodes.view.reorder;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import net.flinkgutt.samples.nodes.api.ICategory;
import net.flinkgutt.samples.nodes.api.ICategoryDAO;
import net.flinkgutt.samples.nodes.api.db.IConnectionService;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.flinkgutt.samples.nodes.view.reorder//ReOrder//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ReOrderTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "net.flinkgutt.samples.nodes.view.reorder.ReOrderTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ReOrderAction",
        preferredID = "ReOrderTopComponent")
@Messages({
    "CTL_ReOrderAction=ReOrder",
    "CTL_ReOrderTopComponent=ReOrder Window",
    "HINT_ReOrderTopComponent=This is a ReOrder window"
})
public final class ReOrderTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private ICategoryDAO categoryDAO = Lookup.getDefault().lookup(ICategoryDAO.class);
    private IConnectionService connection = Lookup.getDefault().lookup(IConnectionService.class);
    private ExplorerManager em = new ExplorerManager();

    public ReOrderTopComponent() {
        initComponents();
        setName(Bundle.CTL_ReOrderTopComponent());
        setToolTipText(Bundle.HINT_ReOrderTopComponent());

        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    private void refreshTree() {
        // We check if we actually found an implementation of ICategoryDAO
        if (categoryDAO == null) {
            return; // Or we could try one more time to find an implementation
        }
        ICategory rootCategory = categoryDAO.getRootCategory();
        //Node rootNode = new RootNode(rootCategory, new InstanceContent());
        Node rootNode = new CategoryNode(rootCategory, new InstanceContent());
        em.setRootContext(rootNode);
        beanTreeView1.setRootVisible(false);
        // TODO Figure out how to get the root node to be invisible, but still allow us to use the ReOrderAction
        // See https://blogs.oracle.com/geertjan/entry/org_openide_actions_reorderaction Comment by metator
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
        refreshButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(ReOrderTopComponent.class, "ReOrderTopComponent.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton)
                .addContainerGap(193, Short.MAX_VALUE))
            .addComponent(beanTreeView1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(beanTreeView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refreshTree();
    }//GEN-LAST:event_refreshButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        connection.addPropertyChangeListener("connection", this);

    }

    @Override
    public void componentClosed() {
        connection.removePropertyChangelistener("connection", this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // We only listen to "connection" for now, but just to be on the defensive.
        if (evt.getPropertyName().equalsIgnoreCase("connection")) {
            if (evt.getNewValue().equals("connected")) {
                refreshTree();
            }
        }
    }
}
